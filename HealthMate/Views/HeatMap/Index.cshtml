@model IEnumerable<HealthMate.Models.Stats>

@{
    ViewData["Title"] = "Heat Map Sync";
}




<head>
    <title>Heat Map</title>
    <link rel="stylesheet" type="text/css" href="css/main.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <!-- Libraries -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.0/d3.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="js/index.js"></script>

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-68576141-1', 'auto');
        ga('send', 'pageview');
    </script>
</head>
<body>


    <h1 class="text-center  custom-title">Inflammation Activity</h1>

    <form class="input-group  custom-input-group">
        <input type="text" class="js-user-field  form-control" name="user" placeholder="">
        <span class="input-group-btn">
            <button class="btn  btn-default" type="submit">Go!</button>
        </span>
    </form>

    <label class="center  checkbox">
        <input class="js-votes" type="checkbox">
        <a class="js-vote-link" target="_blank" href="http://stackoverflow.com/questions/34947447/403-forbidden-get-upvoted-comments-from-reddit/34947550" title="Turn on privacy options">&nbsp;Use upvotes and downvotes</a>
    </label>

    <div class="results">
        <div class="js-heatmap"></div>
        <div class="js-months"></div>
        <div class="js-legend"></div>
        <div class="js-empty  hidden  center">
            <h4>Oops!</h4>
            <img src="assets/404.gif" style="width:400px;height:300px"></img>
        </div>
        <div class="js-spinner  loader  hidden"></div>
    </div>
</body>



@section scripts{


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.0/d3.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="js/index.js"></script>

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-68576141-1', 'auto');
        ga('send', 'pageview');</script>

    <script>
        var TYPE_TO_FIELDS_MAPPING = {
            submitted: ['id', 'permalink', 'created', 'title', 'score', 'subreddit'],
            comments: ['id', 'link_url', 'created', 'subreddit', 'link_title', 'body'],
            upvoted: ['id', 'permalink', 'created', 'subreddit', 'title'],
            downvoted: ['id', 'permalink', 'created', 'subreddit', 'title']
        };
        var CELL_SIZE = 14;
        var NUMBER_OF_COLORS = 6;

        $(document).ready(function () {
            $('form').submit(function (e) {
                e.preventDefault();
                var countVotes = $('.js-votes')[0].checked;
                var user = $('.js-user-field').val();
                window.location.href = `${window.location.origin}${window.location.pathname}?user=${user}&votes=${countVotes}`;
            });

            $('.js-vote-link').tooltip();

            var search = getSearchParameters();
            if (!search) return;
            // Begin fetch and render.
            $('.js-spinner').toggleClass('hidden', false);
            $('.js-user-field').val(search.user);

            var votes = search.votes === 'true';
            $('.js-votes').attr('checked', votes);

            fetchRedditData(search.user, votes)
                .done(function (posted, comments, upvoted, downvoted) {
                    // Check for posted and commented data since those two should always be present.
                    if (!posted.length && !comments.length) return showEmptyMessage();
                    var data = formatData({ posted, comments, upvoted, downvoted });
                    $('.js-spinner').toggleClass('hidden', true);
                    if (!data || data.startDate.toString() === 'Invalid Date') return showEmptyMessage();

                    var yearFormat = d3.timeFormat('%Y');
                    var startYear = yearFormat(data.startDate);
                    var endYear = Number(yearFormat(new Date())) + 1;
                    createHeatMap(data, startYear, endYear);
                })
                .fail(function (err) {
                    $('.js-spinner').toggleClass('hidden', true);
                    showEmptyMessage();
                });

        });


        function getSearchParameters() {
            var search = window.location.search;
            // If the url doesn't have the username, then return.
            if (search.indexOf('user') < 0) return;

            var obj = {};
            search.replace(/(^\?)/, '').split('&').forEach((pair) => {
                var parts = pair.split('=');
                obj[parts[0]] = decodeURIComponent(parts[1].replace(/\+/g, ' '));
            });
            return obj;
        }


        function fetchRedditData(user, votes) {
            var types = ['submitted', 'comments'];
            if (votes) types = types.concat(['upvoted', 'downvoted'])
            var requests = types.map(function (type) {
                return $.getJSON(`https://www.reddit.com/user/${user}/${type}.json?limit=100`)
                    .then(function (response) {
                        if (!response.data || !response.data.children.length) return [];

                        var fields = TYPE_TO_FIELDS_MAPPING[type];
                        return response.data.children.map(function (child) {
                            var table = {};
                            for (var i in fields) {
                                table[fields[i]] = child.data[fields[i]];
                            }
                            return table;
                        });
                    });
            });

            return $.when(...requests);
        }


        function formatData(data) {
            var oldestDate = new Date();
            var maxCount = 0;
            var dateTable = {};
            for (var key in data) {
                var value = data[key];
                if (!value || !value.length || !key) continue;

                var lastDate = new Date(value[value.length - 1].created * 1000);
                oldestDate = Math.min(oldestDate, lastDate);
                value.forEach((entity) => {
                    var format = d3.timeFormat('%Y-%m-%d');
                    // Created is a date timestamp in seconds.
                    var date = format(new Date(entity.created * 1000));

                    if (dateTable[date]) {
                        var typeCount = dateTable[date][key];
                        dateTable[date][key] = typeCount ? typeCount + 1 : 1;
                        dateTable[date].count++;
                    } else {
                        dateTable[date] = { count: 1 };
                        dateTable[date][key] = 1;
                    }

                    maxCount = Math.max(maxCount, dateTable[date].count);
                });
            }

            return {
                startDate: new Date(oldestDate),
                dates: dateTable,
                maxCount
            };
        }


        function createHeatMap(data, startYear, endYear) {
            var width = 900;
            var height = 110;
            var dx = 35;
            var gridClass = 'js-date-grid day';
            var formatColor = d3.scaleQuantize().domain([0, data.maxCount]).range(d3.range(NUMBER_OF_COLORS).map((d) => `color${d}`));

            var heatmapSvg = d3.select('.js-heatmap').selectAll('svg.heatmap')
                .enter()
                .append('svg')
                .data(d3.range(startYear, endYear))
                .enter()
                .append('svg')
                .attr('width', width)
                .attr('height', height)
                .attr('class', 'color')

            // Add a grid for each day between the date range.
            var dates = Object.keys(data.dates);
            var rect = heatmapSvg.append('g')
                .attr('transform', `translate(${dx},0)`);

            // Add year label.
            rect.append('text')
                .attr('transform', `translate(-9,${CELL_SIZE * 3.5})rotate(-90)`)
                .style('text-anchor', 'middle')
                .text((d) => d);

            rect.selectAll('.day')
                // The heatmap will contain all the days in that year.
                .data((d) => d3.timeDays(new Date(d, 0, 1), new Date(d + 1, 0, 1)))
                .enter()
                .append('rect')
                .attr('class', gridClass)
                .attr('width', CELL_SIZE)
                .attr('height', CELL_SIZE)
                .attr('x', (d) => d3.timeFormat('%U')(d) * CELL_SIZE)
                .attr('y', (d) => d.getDay() * CELL_SIZE)
                .attr('data-toggle', 'tooltip')
                .datum(d3.timeFormat('%Y-%m-%d'))
                // Add the grid data as a title attribute to render as a tooltip.
                .attr('title', (d) => {
                    var countData = data.dates[d];
                    var date = d3.timeFormat('%b %d, %Y')(new Date(d));
                    if (!countData || !countData.count) return `No posts on ${date}`;
                    else if (countData.count === 1) return `1 post on ${date}`;
                    else return `${countData.count} posts on ${date}`;
                })
                .attr('date', (d) => d)
                // Add bootstrap's tooltip event listener.
                .call(() => $('[data-toggle="tooltip"]').tooltip({
                    container: 'body',
                    placement: 'top',
                    position: { my: 'top' }
                }))
                // Add the colors to the grids.
                .filter((d) => dates.indexOf(d) > -1)
                .attr('class', (d) => `${gridClass} ${formatColor(data.dates[d].count)}`)

            // Render x axis to show months
            d3.select('.js-months').selectAll('svg.months')
                .enter()
                .append('svg')
                .data([1])
                .enter()
                .append('svg')
                .attr('width', 800)
                .attr('height', 20)
                .append('g')
                .attr('transform', 'translate(0,10)')
                .selectAll('.month')
                .data(() => d3.range(12))
                .enter()
                .append('text')
                .attr('x', (d) => d * (4.5 * CELL_SIZE) + dx)
                .text((d) => d3.timeFormat('%b')(new Date(0, d + 1, 0)));

            // Render the grid color legend.
            var legendSvg = d3.select('.js-legend').selectAll('svg.legend')
                .enter()
                .append('svg')
                .data([1])
                .enter()
                .append('svg')
                .attr('width', 800)
                .attr('height', 20)
                .append('g')
                .attr('transform', 'translate(644,0)')
                .selectAll('.legend-grid')
                .data(() => d3.range(7))
                .enter()
                .append('rect')
                .attr('width', CELL_SIZE)
                .attr('height', CELL_SIZE)
                .attr('x', (d) => d * CELL_SIZE + dx)
                .attr('class', (d) => `day color${d - 1}`);

        }

        function showEmptyMessage() {
            $('.js-empty').toggleClass('hidden', false);
        }</script>


    
    
    
    <script>
        $(document).ready(setup);

        function setup() {

            var option = {
                type: "GET",
                url: "/chart/data",
                contentType: "application/json;charset=utf-8",
                datatype: "json",
                success: data_arrived
            };
            $.ajax(option);
        }
        function data_arrived(data) {

            // console.log(data);
            var x_data = data[0];
            var y_data = data[1];

            var graph_data = {
                label: x_data,
                datasets: [
                    {

                        data: y_data,
                        backgroundColor: ['#cf28de', '	#28dedb', '#e30242'],
                        hoverBackgroundColor: ['#F0FFFF', '#F0FFFF', '#F0FFFF'],
                        borderColor: ['#FFFFFF', '#FFFFFF', '#FFFFFF'],
                        borderWidth: 2.5
                    }
                ],

                labels: [
                    'Protein',
                    'Carbs',
                    'Fats'
                ]
            };

            var panel1 = $('#chart1').get(0).getContext("2d");
            var chart1 = new Chart(
                panel1,
                {
                    type: 'pie',
                    data: graph_data,
                    options: {
                        maintainAspectRatio: false
                    }
                }
            );

        }
    </script>
}